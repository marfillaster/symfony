<?php

namespace Symfony\Components\Validator;

/*
 * This file is part of the symfony package.
 * (c) Fabien Potencier <fabien.potencier@symfony-project.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * ValidatedFile represents a validated uploaded file.
 *
 * @package    symfony
 * @subpackage validator
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: ValidatedFile.php 49 2009-12-03 15:44:14Z robert $
 */
class ValidatedFile
{
  protected
    $originalName = '',
    $tempName     = '',
    $savedName    = null,
    $type         = '',
    $size         = 0,
    $path         = null;

  /**
   * Constructor.
   *
   * @param string $originalName  The original file name
   * @param string $type          The file content type
   * @param string $tempName      The absolute temporary path to the file
   * @param int    $size          The file size (in bytes)
   */
  public function __construct($originalName, $type, $tempName, $size, $path = null)
  {
    $this->originalName = $originalName;
    $this->tempName = $tempName;
    $this->type = $type;
    $this->size = $size;
    $this->path = $path;
  }

  /**
   * Returns the name of the saved file.
   */
  public function __toString()
  {
    return null === $this->savedName ? '' : $this->savedName;
  }

  /**
   * Saves the uploaded file.
   *
   * This method can throw exceptions if there is a problem when saving the file.
   *
   * If you don't pass a file name, it will be generated by the generateFilename method.
   * This will only work if you have passed a path when initializing this instance.
   *
   * @param  string $file      The file path to save the file
   * @param  int    $fileMode  The octal mode to use for the new file
   * @param  bool   $create    Indicates that we should make the directory before moving the file
   * @param  int    $dirMode   The octal mode to use when creating the directory
   *
   * @return string The filename without the $this->path prefix
   *
   * @throws Exception
   */
  public function save($file = null, $fileMode = 0666, $create = true, $dirMode = 0777)
  {
    if (null === $file)
    {
      $file = $this->generateFilename();
    }

    if ($file[0] != '/' && $file[0] != '\\' && !(strlen($file) > 3 && ctype_alpha($file[0]) && $file[1] == ':' && ($file[2] == '\\' || $file[2] == '/')))
    {
      if (null === $this->path)
      {
        throw new \RuntimeException('You must give a "path" when you give a relative file name.');
      }

      $file = $this->path.DIRECTORY_SEPARATOR.$file;
    }

    // get our directory path from the destination filename
    $directory = dirname($file);

    if (!is_readable($directory))
    {
      if ($create && !@mkdir($directory, $dirMode, true))
      {
        // failed to create the directory
        throw new \Exception(sprintf('Failed to create file upload directory "%s".', $directory));
      }

      // chmod the directory since it doesn't seem to work on recursive paths
      chmod($directory, $dirMode);
    }

    if (!is_dir($directory))
    {
      // the directory path exists but it's not a directory
      throw new \Exception(sprintf('File upload path "%s" exists, but is not a directory.', $directory));
    }

    if (!is_writable($directory))
    {
      // the directory isn't writable
      throw new \Exception(sprintf('File upload path "%s" is not writable.', $directory));
    }

    // copy the temp file to the destination file
    copy($this->getTempName(), $file);

    // chmod our file
    chmod($file, $fileMode);

    $this->savedName = $file;

    return null === $this->path ? $file : str_replace($this->path.DIRECTORY_SEPARATOR, '', $file);
  }

  /**
   * Generates a random filename for the current file.
   *
   * @return string A random name to represent the current file
   */
  public function generateFilename()
  {
    return sha1($this->getOriginalName().rand(11111, 99999)).$this->getExtension($this->getOriginalExtension());
  }

  /**
   * Returns the path to use when saving a file with a relative filename.
   *
   * @return string The path to use when saving a file with a relative filename
   */
  public function getPath()
  {
    return $this->path;
  }

  /**
   * Returns the file extension, based on the content type of the file.
   *
   * @param  string $default  The default extension to return if none was given
   *
   * @return string The extension (with the dot)
   */
  public function getExtension($default = '')
  {
    return $this->getExtensionFromType($this->type, $default);
  }

  /**
   * Returns the original uploaded file name extension.
   *
   * @param  string $default  The default extension to return if none was given
   *
   * @return string The extension of the uploaded name (with the dot)
   */
  public function getOriginalExtension($default = '')
  {
    return (false === $pos = strrpos($this->getOriginalName(), '.')) ? $default : substr($this->getOriginalName(), $pos);
  }

  /**
   * Returns true if the file has already been saved.
   *
   * @return Boolean true if the file has already been saved, false otherwise
   */
  public function isSaved()
  {
    return null !== $this->savedName;
  }

  /**
   * Returns the path where the file has been saved
   *
   * @return string The path where the file has been saved
   */
  public function getSavedName()
  {
    return $this->savedName;
  }

  /**
   * Returns the original file name.
   *
   * @return string The file name
   */
  public function getOriginalName()
  {
    return $this->originalName;
  }

  /**
   * Returns the absolute temporary path to the uploaded file.
   *
   * @return string The temporary path
   */
  public function getTempName()
  {
    return $this->tempName;
  }

  /**
   * Returns the file content type.
   *
   * @return string The content type
   */
  public function getType()
  {
    return $this->type;
  }

  /**
   * Returns the size of the uploaded file.
   *
   * @return int The file size
   */
  public function getSize()
  {
    return $this->size;
  }

  /**
   * Returns the extension associated with the given content type.
   *
   * @param  string $type     The content type
   * @param  string $default  The default extension to use
   *
   * @return string The extension (with the dot)
   */
  protected function getExtensionFromType($type, $default = '')
  {

  }
}
